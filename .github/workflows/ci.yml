name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  FORCE_COLOR: 1

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Check Prettier formatting
        run: pnpm exec prettier --check .

      - name: TypeScript type check
        run: pnpm exec tsc --noEmit

  build-test:
    name: Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run vite:build:app

      - name: Test Electron build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          xvfb-run --auto-servernum pnpm run electron:build:dir
        env:
          DEBUG: electron-builder

      - name: Test Electron build (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm run electron:build:dir
        env:
          DEBUG: electron-builder

      - name: Test Electron build (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm run electron:build:dir
        env:
          DEBUG: electron-builder

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, build-test]
    if: always()

    steps:
      - name: Check build results
        run: |
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Build & Test: ${{ needs.build-test.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"

          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.build-test.result }}" == "failure" || 
                "${{ needs.security-audit.result }}" == "failure" || 
                "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi
