name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FORCE_COLOR: 1

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npx prettier --check .

      - name: TypeScript type check
        run: npx tsc --noEmit

  build-test:
    name: Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run vite:build:app

      - name: Test Electron build (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          xvfb-run --auto-servernum npm run electron:build:dir
        env:
          DEBUG: electron-builder

      - name: Test Electron build (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run electron:build:dir
        env:
          DEBUG: electron-builder

      - name: Test Electron build (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run electron:build:dir
        env:
          DEBUG: electron-builder

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate

  dependency-check:
    name: Dependency Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Validate package-lock.json
        run: npm ci --dry-run

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: License check
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0' --summary

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, build-test, security-audit, dependency-check]
    if: always()
    
    steps:
      - name: Check build results
        run: |
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Build & Test: ${{ needs.build-test.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.build-test.result }}" == "failure" || 
                "${{ needs.security-audit.result }}" == "failure" || 
                "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi