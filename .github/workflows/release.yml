name: Release

on:
  workflow_dispatch:
    inputs:
      pre_release:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  FORCE_COLOR: 1

jobs:
  check-permission:
    name: Check Permission
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is repo owner
        if: github.actor != github.repository_owner
        run: |
          echo "❌ Only the repository owner can trigger releases"
          exit 1

  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    needs: check-permission
    outputs:
      version: ${{ steps.package-version.outputs.version }}
      tag: ${{ steps.package-version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: Check if tag exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.package-version.outputs.version }}$"; then
            echo "❌ Tag v${{ steps.package-version.outputs.version }} already exists"
            exit 1
          fi

  build:
    name: Build Release
    needs: extract-version
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build application
        run: pnpm run vite:build:app

      - name: Build Electron app (Linux)
        if: matrix.platform == 'linux'
        run: pnpm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Windows)
        if: matrix.platform == 'windows'
        run: pnpm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.platform == 'macos'
        run: pnpm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform }}-${{ needs.extract-version.outputs.version }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
          retention-days: 5

  create-release:
    name: Create GitHub Release
    needs: [extract-version, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.extract-version.outputs.tag }}
          name: ${{ needs.extract-version.outputs.version }}
          body: |
            ## Version ${{ needs.extract-version.outputs.version }}

            Download the installer for your platform below.

            ### Installation
            - **Windows**: Download and run the `.exe` installer
            - **macOS**: Download and open the `.dmg` file  
            - **Linux**: Download `.AppImage` (portable) or `.deb`/`.snap` (package managers)
          draft: false
          prerelease: ${{ inputs.pre_release }}
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/*.dmg  
            release-artifacts/**/*.AppImage
            release-artifacts/**/*.snap
            release-artifacts/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            release-linux-${{ needs.extract-version.outputs.version }}
            release-windows-${{ needs.extract-version.outputs.version }}
            release-macos-${{ needs.extract-version.outputs.version }}
